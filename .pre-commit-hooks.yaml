#
# Define running hooks.
#
-   id: validate-turtle
    name: Validate a turtle file
    description: |-
      This hook validate a turtle file using the rules.shacl files
      in the closest parent tree.

      By default, only `.ttl` files in `assets/` are processed,
      but this can be tweaked using the `files` property.

      Files containing the following strings are excluded by default:
      -aligns, -DBGT, example.
    entry: python -m dati_playground validate --validate-shacl=true
    language: python
    files: >-
      ^assets/.*\.ttl$
    exclude: >-
      .*(-aligns|-DBGT|example).*
    types:
    - file

-   id: validate-oas-schema
    name: Validate schema
    description: This hook validates a schema provided in yaml format
    entry: python -m dati_playground validate --validate-jsonschema=true
    language: python
    files: ^assets/.*\.schema.yaml
    exclude: >-
      .*example.*
    types:
    - file

-   id: validate-directory-versioning
    name: Validate directory layout
    description: |-
      Check that the `latest/` version directory has the same content
      of the directory with the latest semantic versioning.

      By default, only `.ttl` files in `assets/` are processed,
      but this can be tweaked using the `files` property.

      Files containing the following strings are excluded by default:
      -aligns, -DBGT, example.

    entry: python -m dati_playground validate --validate-versioned-directory=true
    exclude: >-
      .*(-aligns|-DBGT|example).*
    files: >-
      ^assets/.*\.ttl
    language: python
    types:
    - file

-   id: validate-csv
    name: Validate csv layout
    description: |-
      Check that CSV files are coherent.

      By default, only `.csv` files in `assets/` are processed,
      but this can be tweaked using the `files` property.

      Files containing the following strings are excluded by default:
      example.

    entry: python -m dati_playground validate --validate-csv=true
    files: >-
      ^assets/vocabularies/.*\.csv
    language: python
    types:
    - file

-   id: validate-repo-structure
    name: Validate repository structure
    description: |-
      Check that the structure of the assets directories 
      complies with the specified requirements.

      The required directories are as follows: 
      "assets/controlled-vocabularies", "assets/ontologies", "assets/schemas".

      If there are any other directories within "assets", the check will fail.
      If the present directories match the required ones and their names are compliant, 
      the check will pass, even if there are fewer directories

    entry: python -m dati_playground validate --validate-repo-structure=true assets
    language: python
    fail_fast: true
    pass_filenames: false

-   id: validate-filename-format
    name: Validate filename e directory name formats
    description: |-
      This check ensures that file and directory name adhere to a predefined naming pattern. 
      It verifies file extensions and the names of files and their parent directories 
      against a specified regular expression pattern.
      The check will fail if any deviations are found.

    entry: python -m dati_playground validate --validate-filename-format=true
    files: >-
      ^assets/.*
    language: python
    types:
    - file
