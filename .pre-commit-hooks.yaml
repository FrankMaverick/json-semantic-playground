#
# Define running hooks.
#
-   id: validate-turtle
    name: Validate a turtle file
    description: |-
      This hook validate a turtle file using the rules.shacl files
      in the closest parent tree.

      By default, only `.ttl` files in `assets/` are processed,
      but this can be tweaked using the `files` property.

      Files containing the following strings are excluded by default:
      -aligns, -DBGT, example.
    entry: python -m dati_playground validate --validate-shacl=true
    language: python
    files: >-
      ^assets/.*\.ttl$
    exclude: >-
      .*(-aligns|-DBGT|example).*
    types:
    - file

-   id: validate-oas-schema
    name: Validate schema
    description: This hook validates a schema provided in yaml format
    entry: python -m dati_playground validate --validate-jsonschema=true
    language: python
    files: ^assets/.*\.schema.yaml
    exclude: >-
      .*example.*
    types:
    - file

-   id: validate-directory-versioning
    name: Validate directory layout
    description: |-
      Check that the `latest/` version directory has the same content
      of the directory with the latest semantic versioning.

      By default, only `.ttl` files in `assets/` are processed,
      but this can be tweaked using the `files` property.

      Files containing the following strings are excluded by default:
      -aligns, -DBGT, example.

    entry: python -m dati_playground validate --validate-versioned-directory=true
    exclude: >-
      .*(-aligns|-DBGT|example).*
    files: >-
      ^assets/.*\.ttl
    language: python
    types:
    - file

-   id: validate-csv
    name: Validate csv layout
    description: |-
      Check that CSV files are coherent.

      By default, only `.csv` files in `assets/` are processed,
      but this can be tweaked using the `files` property.

      Files containing the following strings are excluded by default:
      example.

    entry: python -m dati_playground validate --validate-csv=true
    files: >-
      ^assets/vocabularies/.*\.csv
    language: python
    require_serial: true
    types:
    - file

-   id: validate-repo-structure
    name: Validate repository structure
    description: |-
      Check that the structure of the assets directories 
      complies with the specified requirements.

      The required directories are as follows: 
      "assets/controlled-vocabularies", "assets/ontologies", "assets/schemas".

      If there are any other directories within "assets", the check will fail.
      If the present directories match the required ones and their names are compliant, 
      the check will pass, even if there are fewer directories

    entry: python -m dati_playground validate --validate-repo-structure=true assets
    language: python
    fail_fast: true
    pass_filenames: false
    require_serial: true

-   id: validate-filename-format
    name: Validate filename e directory name formats
    description: |-
      This check ensures that file and directory name adhere to a predefined naming pattern. 
      It verifies file extensions and the names of files and their parent directories 
      against a specified regular expression pattern.
      The check will fail if any deviations are found.

    entry: python -m dati_playground validate --validate-filename-format=true
    files: >-
      ^assets\/.*
    language: python
    require_serial: true
    types:
    - file


-   id: validate-filename-match-uri
    name: Validate filename match uri in ttl
    description: |-
      It checks if a file's name matches its corresponding URI extracted from a TTL file. 
      It extracts the main URI relative to the TTL file, 
      then compares it with the filename to ensure consistency. 
      In the case of schemas, it verifies the filename with the .oas3.yaml extension 
      instead of the .ttl file as in other cases. 
      If a discrepancy is found, the check fails.

    entry: python -m dati_playground validate --validate-filename-match-uri=true
    files: >-
      ^assets\/.*\.ttl
    language: python
    require_serial: true
    types:
    - file

-   id: validate-filename-match-directory
    name: Validate filename match directory name
    description: |-
      It checks that each file's name matches the name of the directory containing it 
      (excluding versioning directories). 
      It excludes specific filenames and file extensions from the validation process. 
      If a file's name or its containing directory name does not match 
      the expected pattern, an error is logged, and the validation fails.

    entry: python -m dati_playground validate --validate-filename-match-directory=true
    files: >-
      ^assets\/.*
    language: python
    require_serial: true
    types:
    - file

-   id: validate-directory-versioning-pattern
    name: Validate versioning pattern of directory
    description: |-
      Checks the directory structure for versioned directories. 
      It ensures that the directory is a leaf, is versioned, 
      and has consistent versioning patterns with its sibling directories. 
      If the directory name does not match the expected versioning pattern, 
      an error is logged, and the validation fails.

    entry: python -m dati_playground validate --validate-directory-versioning-pattern=true assets\/**\/*.*
    language: python
    pass_filenames: false
    require_serial: true

-   id: validate-mandatory-files-presence
    name: Validate mandatory files presence
    description: |-
      Checks if the directory containing the given file is a leaf directory 
      and contains at least one turtle (.ttl) file.
      If the directory path contains 'schemas', 
      it also verifies the presence of a '.oas3.yaml' file.
      if it does not find the required files
      an error is logged, and the validation fails.

    entry: python -m dati_playground validate --validate-mandatory-files-presence=true
    files: >-
      ^assets\/.*
    language: python
    require_serial: true
    types:
    - file